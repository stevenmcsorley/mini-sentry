version: "3.9"

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["bash", "/app/scripts/entrypoint-web.sh"]
    environment:
      - DJANGO_DEBUG=1
      - SECRET_KEY=dev-secret-key
      - DATABASE_URL=postgres://sentry:sentry@postgres:5432/sentry
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ALLOWED_HOSTS=*
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - kafka

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["bash", "/app/scripts/entrypoint-worker.sh"]
    environment:
      - DJANGO_DEBUG=1
      - SECRET_KEY=dev-secret-key
      - DATABASE_URL=postgres://sentry:sentry@postgres:5432/sentry
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ALLOWED_HOSTS=*
    volumes:
      - .:/app
    depends_on:
      - postgres
      - redis
      - kafka

  beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["bash", "/app/scripts/entrypoint-beat.sh"]
    environment:
      - DJANGO_DEBUG=1
      - SECRET_KEY=dev-secret-key
      - DATABASE_URL=postgres://sentry:sentry@postgres:5432/sentry
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ALLOWED_HOSTS=*
    volumes:
      - .:/app
    depends_on:
      - postgres
      - redis
      - kafka

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: sentry
      POSTGRES_DB: sentry
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  kafka:
    image: bitnami/kafka:3.6
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    environment:
      - CLICKHOUSE_DB=sentry
    ports:
      - "8123:8123"

  snuba:
    build:
      context: ./snuba
      dockerfile: Dockerfile
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPICS=events,sessions
      - CLICKHOUSE_URL=http://clickhouse:8123
      - CLICKHOUSE_DATABASE=sentry
    depends_on:
      - kafka
      - clickhouse

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    depends_on:
      - web

  fastapi-example:
    build:
      context: ./examples/python-fastapi
      dockerfile: Dockerfile
    environment:
      - MS_BASE=http://web:8000
      - MS_TOKEN=CHANGE_ME
    ports:
      - "5002:5002"
    depends_on:
      - web

  flask-example:
    build:
      context: ./examples/python-flask
      dockerfile: Dockerfile
    environment:
      - MS_BASE=http://web:8000
      - MS_TOKEN=CHANGE_ME
    ports:
      - "5001:5001"
    depends_on:
      - web

  express-example:
    build:
      context: ./examples/node-express
      dockerfile: Dockerfile
    environment:
      - MS_BASE=http://web:8000
      - MS_TOKEN=CHANGE_ME
    ports:
      - "4000:4000"
    depends_on:
      - web

  sinatra-example:
    build:
      context: ./examples/ruby-sinatra
      dockerfile: Dockerfile
    environment:
      - MS_BASE=http://web:8000
      - MS_TOKEN=CHANGE_ME
    ports:
      - "5003:5003"
    depends_on:
      - web

volumes:
  pgdata:
