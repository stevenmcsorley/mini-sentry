openapi: 3.0.3
info:
  title: Mini Sentry API
  version: 1.0.0
  description: |
    **Mini Sentry API** - A comprehensive, Sentry-inspired error tracking and monitoring system.
    
    ## üöÄ Features
    - **Event Ingestion & Grouping** - Real-time error collection with intelligent deduplication
    - **Release Management** - Version tracking with artifact uploads (source maps)
    - **Session Tracking** - Release health monitoring with crash-free rates
    - **Alert System** - Email/webhook notifications with flexible rules and snoozing
    - **Deployment Tracking** - Release deployment monitoring and history
    - **Stack Trace Symbolication** - Source map support for readable stack traces
    - **ClickHouse Analytics** - High-performance analytics backend for large-scale data
    - **Advanced Search** - Powerful filtering and query syntax across events and issues
    - **Dashboard API** - Time-series data and top groups for visualization
    
    ## üîê Authentication
    - **Event/Session Ingestion**: Use project `ingest_token`
    - **Management APIs**: Standard API authentication
    
    ## üîç Search Syntax
    
    **Events** (`/api/events/`):
    - `level:error` or `severity:warning` - Filter by event level
    - `env:production` or `environment:staging` - Filter by environment  
    - `release:v1.0` - Filter by release version
    - `message:substring` - Search in event messages
    - Free text search across all message content
    
    **Groups** (`/api/groups/`):
    - `status:open|resolved|ignored` - Filter by issue status
    - `assignee:username` - Filter by assigned user
    - `title:"quoted phrase"` - Search in issue titles
    - Free text search across all titles
    
    ## üìä Time Ranges
    Supported formats: `1h`, `24h`, `7d`, `14d`, `30d`, `90d`, `1y`
    
    ## üèóÔ∏è Backends  
    - **PostgreSQL** (`pg`) - Primary relational storage
    - **ClickHouse** (`ch`) - Analytics and time-series data
    
  contact:
    name: Mini Sentry
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
    
servers:
  - url: http://localhost:8000
    description: Local development server
  - url: https://api.minisentry.example.com
    description: Production server

security:
  - ApiKeyAuth: []
  - IngestTokenAuth: []

paths:
  /api/health:
    get:
      operationId: healthCheck
      summary: Health check
      description: Check API health status and service availability
      tags: [System]
      responses:
        '200':
          description: API is healthy and operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/projects:
    get:
      operationId: listProjects
      summary: List projects
      description: Get all projects accessible to the current user
      tags: [Projects]
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createProject
      summary: Create project
      description: Create a new project for event tracking
      tags: [Projects]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, slug]
              properties:
                name: 
                  type: string
                  description: Human-readable project name
                  example: "My Web App"
                  maxLength: 100
                slug: 
                  type: string
                  description: URL-friendly identifier (lowercase, alphanumeric, hyphens)
                  example: "my-web-app"
                  pattern: '^[a-z0-9-]+$'
                  maxLength: 50
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Project slug already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/events:
    get:
      operationId: listEvents
      summary: List events
      description: |
        Get events with comprehensive filtering and search capabilities.
        
        **Search Query Syntax (`q` parameter):**
        - `level:error` or `severity:warning` - Filter by event level
        - `env:production` or `environment:staging` - Filter by environment
        - `release:v1.0` - Filter by release version  
        - `message:substring` - Search within event messages
        - `database timeout` - Free text search across all messages
        
        **Multiple conditions:** `level:error env:production database`
      tags: [Events]
      parameters:
        - in: query
          name: project
          schema: 
            type: string
          description: Filter by project slug
          example: "my-web-app"
        - in: query
          name: level
          schema: 
            type: string
            enum: [error, warning, info]
          description: Filter by event level
        - in: query
          name: environment
          schema: 
            type: string
          description: Filter by environment
          example: "production"
        - in: query
          name: release
          schema: 
            type: string
          description: Filter by release version
          example: "v1.2.3"
        - in: query
          name: from
          schema: 
            type: string
            format: date-time
          description: Start datetime (ISO 8601)
          example: "2025-01-01T00:00:00Z"
        - in: query
          name: to
          schema: 
            type: string
            format: date-time
          description: End datetime (ISO 8601)  
          example: "2025-01-02T00:00:00Z"
        - in: query
          name: q
          schema: 
            type: string
          description: Advanced search query with multiple conditions
          example: "level:error env:production timeout"
        - in: query
          name: limit
          schema: 
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
          description: Number of events to return (pagination)
        - in: query
          name: offset
          schema: 
            type: integer
            minimum: 0
            default: 0
          description: Pagination offset
      responses:
        '200':
          description: Paginated list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEvents'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/events/{id}:
    get:
      operationId: getEvent
      summary: Get event details
      description: Retrieve a specific event by ID with full details including symbolicated stack traces
      tags: [Events]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Event ID
          example: 12345
      responses:
        '200':
          description: Event details with symbolicated stack traces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/events/ingest/{project_slug}:
    post:
      operationId: ingestEventBySlug
      summary: Ingest event by project slug
      description: Submit an event to the specified project using project slug
      tags: [Ingestion]
      parameters:
        - in: path
          name: project_slug
          required: true
          schema: 
            type: string
          description: Project slug identifier
          example: "my-web-app"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventIngest'
      responses:
        '201':
          description: Event ingested successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid event data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/events/ingest/token/{token}:
    post:
      operationId: ingestEventByToken
      summary: Ingest event by token
      description: Submit an event using project ingest token (recommended for production)
      tags: [Ingestion]
      parameters:
        - in: path
          name: token
          required: true
          schema: 
            type: string
          description: Project ingest token
          example: "1234567890abcdef"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventIngest'
      responses:
        '201':
          description: Event ingested successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid event data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded (per project/token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/events/clickhouse:
    get:
      operationId: queryClickHouseEvents
      summary: Query events from ClickHouse
      description: Query events directly from ClickHouse analytics backend for high-performance analytics
      tags: [Analytics]
      parameters:
        - in: query
          name: project
          required: true
          schema: 
            type: string
          description: Project slug
          example: "my-web-app"
        - in: query
          name: limit
          schema: 
            type: integer
            minimum: 1
            maximum: 10000
            default: 100
          description: Number of events to return
        - in: query
          name: from
          schema: 
            type: string
            format: date-time
          description: Start datetime for analytics query
        - in: query
          name: to
          schema: 
            type: string
            format: date-time
          description: End datetime for analytics query
      responses:
        '200':
          description: Analytics data from ClickHouse
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClickHouseEvent'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/groups:
    get:
      operationId: listGroups
      summary: List issue groups
      description: |
        Get issue groups (deduplicated issues) with advanced search capabilities.
        
        **Search Query Syntax (`q` parameter):**
        - `status:open|resolved|ignored` - Filter by issue status
        - `assignee:username` - Filter by assigned user  
        - `title:"database error"` - Search in issue titles (quoted for exact phrases)
        - `payment crash` - Free text search across all titles
        
        **Example:** `status:open assignee:alice database`
      tags: [Issues]
      parameters:
        - in: query
          name: project
          schema: 
            type: string
          description: Filter by project slug
          example: "my-web-app"
        - in: query
          name: status
          schema: 
            type: string
            enum: [open, resolved, ignored]
          description: Filter by issue status
        - in: query
          name: assignee
          schema: 
            type: string
          description: Filter by assigned username
        - in: query
          name: from
          schema: 
            type: string
            format: date-time
          description: Filter by last_seen start date
        - in: query
          name: to
          schema: 
            type: string
            format: date-time
          description: Filter by last_seen end date
        - in: query
          name: q
          schema: 
            type: string
          description: Advanced search query
          example: 'status:open assignee:alice title:"database error"'
        - in: query
          name: limit
          schema: 
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
          description: Number of groups to return
        - in: query
          name: offset
          schema: 
            type: integer
            minimum: 0
            default: 0
          description: Pagination offset
      responses:
        '200':
          description: Paginated list of issue groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGroups'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/groups/{id}:
    get:
      operationId: getGroup
      summary: Get issue group details
      description: Retrieve a specific issue group by ID with full details and statistics
      tags: [Issues]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Group ID
          example: 123
      responses:
        '200':
          description: Issue group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/groups/{id}/resolve:
    post:
      operationId: resolveGroup
      summary: Resolve issue
      description: Mark an issue group as resolved
      tags: [Issues]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Group ID to resolve
      responses:
        '200':
          description: Issue resolved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/groups/{id}/unresolve:
    post:
      operationId: unresolveGroup
      summary: Unresolve issue
      description: Mark a resolved issue group as unresolved (reopen)
      tags: [Issues]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Group ID to unresolve
      responses:
        '200':
          description: Issue unresolved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/groups/{id}/ignore:
    post:
      operationId: ignoreGroup
      summary: Ignore issue
      description: Mark an issue group as ignored (will not generate alerts)
      tags: [Issues]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Group ID to ignore
      responses:
        '200':
          description: Issue ignored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/groups/{id}/assign:
    post:
      operationId: assignGroup
      summary: Assign issue
      description: Assign an issue group to a specific user
      tags: [Issues]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Group ID to assign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [assignee]
              properties:
                assignee:
                  type: string
                  description: Username to assign the issue to
                  example: "alice"
                  maxLength: 50
      responses:
        '200':
          description: Issue assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid assignee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/groups/{id}/bookmark:
    post:
      operationId: bookmarkGroup
      summary: Bookmark issue
      description: Add an issue group to bookmarks for quick access
      tags: [Issues]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Group ID to bookmark
      responses:
        '200':
          description: Issue bookmarked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/groups/{id}/unbookmark:
    post:
      operationId: unbookmarkGroup
      summary: Remove bookmark
      description: Remove an issue group from bookmarks
      tags: [Issues]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Group ID to unbookmark
      responses:
        '200':
          description: Bookmark removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/groups/{id}/comments:
    get:
      operationId: getGroupComments
      summary: List issue comments
      description: Get all comments for a specific issue group
      tags: [Issues]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Group ID
      responses:
        '200':
          description: List of comments for the issue
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: addGroupComment
      summary: Add comment to issue
      description: Add a new comment to an issue group for team collaboration
      tags: [Issues]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Group ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [body, author]
              properties:
                body:
                  type: string
                  description: Comment text content
                  example: "Fixed in release v1.2.4"
                  maxLength: 2000
                author:
                  type: string
                  description: Comment author username
                  example: "alice"
                  maxLength: 50
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid comment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/dashboard/series:
    get:
      operationId: getDashboardSeries
      summary: Get dashboard time series
      description: |
        Get events per minute/hour by severity level for dashboard charts.
        Returns time-series data suitable for line charts and analytics.
      tags: [Dashboard]
      parameters:
        - in: query
          name: project
          required: true
          schema: 
            type: string
          description: Project slug
          example: "my-web-app"
        - in: query
          name: range
          schema: 
            type: string
            enum: [1h, 24h, 7d, 14d, 30d, 90d, 1y]
            default: "1h"
          description: Time range for the series data
        - in: query
          name: interval
          schema: 
            type: string
            enum: [1m, 5m, 15m, 30m, 1h, 24h]
            default: "5m"
          description: Time bucket interval for aggregation
        - in: query
          name: backend
          schema: 
            type: string
            enum: [pg, ch]
            default: "ch"
          description: Data backend (PostgreSQL or ClickHouse)
        - in: query
          name: from
          schema: 
            type: string
            format: date-time
          description: Start datetime (overrides range parameter)
        - in: query
          name: to
          schema: 
            type: string
            format: date-time
          description: End datetime (overrides range parameter)
      responses:
        '200':
          description: Time-series data for dashboard charts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventBucket'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/dashboard/top-groups:
    get:
      operationId: getDashboardTopGroups
      summary: Get top issue groups
      description: |
        Get the most active issue groups for dashboard widgets.
        Returns groups ranked by event count within the specified time range.
      tags: [Dashboard]
      parameters:
        - in: query
          name: project
          required: true
          schema: 
            type: string
          description: Project slug
          example: "my-web-app"
        - in: query
          name: range
          schema: 
            type: string
            enum: [1h, 24h, 7d, 14d, 30d, 90d, 1y]
            default: "24h"
          description: Time range for ranking calculation
        - in: query
          name: limit
          schema: 
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of top groups to return
        - in: query
          name: backend
          schema: 
            type: string
            enum: [pg, ch]
            default: "ch"
          description: Data backend for analytics
        - in: query
          name: from
          schema: 
            type: string
            format: date-time
          description: Start datetime (overrides range)
        - in: query
          name: to
          schema: 
            type: string
            format: date-time
          description: End datetime (overrides range)
      responses:
        '200':
          description: Top issue groups ranked by activity
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopGroup'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/releases:
    get:
      operationId: listReleases
      summary: List releases
      description: Get releases for a project with optional filtering
      tags: [Releases]
      parameters:
        - in: query
          name: project
          schema: 
            type: string
          description: Filter by project slug
          example: "my-web-app"
      responses:
        '200':
          description: List of releases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Release'
    post:
      operationId: createRelease
      summary: Create release
      description: Create a new release for deployment tracking and artifact management
      tags: [Releases]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [project, version]
              properties:
                project: 
                  type: integer
                  description: Project ID
                  example: 1
                version: 
                  type: string
                  description: Release version (semantic versioning recommended)
                  example: "v1.2.3"
                  maxLength: 50
                environment: 
                  type: string
                  default: "production"
                  description: Target environment for this release
                  example: "production"
                  maxLength: 50
      responses:
        '201':
          description: Release created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
        '400':
          description: Invalid release data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/releases/{id}/artifacts:
    get:
      operationId: listReleaseArtifacts
      summary: List release artifacts
      description: Get artifacts (e.g., source maps) uploaded to a specific release
      tags: [Releases]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Release ID
          example: 42
      responses:
        '200':
          description: List of artifacts for the release
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artifact'
        '404':
          description: Release not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: uploadArtifact
      summary: Upload artifact
      description: |
        Upload an artifact (e.g., JavaScript source map) to a release.
        Artifacts enable symbolication of minified stack traces.
      tags: [Releases]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Release ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, content]
              properties:
                name: 
                  type: string
                  description: Artifact filename (e.g., "app.js.map")
                  example: "static/js/main.abc123.js.map"
                  maxLength: 255
                content: 
                  type: string
                  description: Artifact content (JSON string for source maps)
                  example: '{"version":3,"sources":["src/App.js"],...}'
                content_type: 
                  type: string
                  default: "application/json"
                  description: MIME type of the artifact
                  example: "application/json"
      responses:
        '201':
          description: Artifact uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
        '400':
          description: Invalid artifact data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Release not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/symbolicate:
    post:
      operationId: symbolicateFrames
      summary: Symbolicate stack traces
      description: |
        Convert minified/compiled stack traces to original source locations using uploaded source maps.
        Supports both individual frames and raw stack trace strings.
      tags: [Symbolication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [project, release]
              properties:
                project: 
                  type: string
                  description: Project slug
                  example: "my-web-app"
                release: 
                  type: string
                  description: Release version
                  example: "v1.2.3"
                environment: 
                  type: string
                  default: "production"
                  description: Environment name
                frames:
                  type: array
                  description: Stack frames to symbolicate (alternative to stack string)
                  items:
                    $ref: '#/components/schemas/Frame'
                stack: 
                  type: string
                  description: Raw stack trace string (alternative to frames array)
                  example: "Error: Something went wrong\n    at Object.t (app.js:1:2345)\n    at app.js:1:6789"
      responses:
        '200':
          description: Symbolicated stack trace with original source locations
          content:
            application/json:
              schema:
                type: object
                properties:
                  frames:
                    type: array
                    items:
                      $ref: '#/components/schemas/SymbolicatedFrame'
        '400':
          description: Invalid symbolication request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project or release not found, or source maps not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/sessions/ingest/token/{token}:
    post:
      operationId: ingestSession
      summary: Ingest session data
      description: |
        Submit session data for release health tracking and crash-free rate calculation.
        Used by SDKs to report application session lifecycle events.
      tags: [Sessions]
      parameters:
        - in: path
          name: token
          required: true
          schema: 
            type: string
          description: Project ingest token
          example: "1234567890abcdef"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionIngest'
      responses:
        '200': 
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '201': 
          description: New session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Invalid session data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/releases/health:
    get:
      operationId: getReleaseHealth
      summary: Get release health summary
      description: |
        Get crash-free rates and session statistics by release and environment.
        Provides high-level health metrics for release monitoring.
      tags: [Release Health]
      parameters:
        - in: query
          name: project
          required: true
          schema: 
            type: string
          description: Project slug
          example: "my-web-app"
      responses:
        '200':
          description: Release health summary by version and environment
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HealthSummary'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/releases/health/series:
    get:
      operationId: getReleaseHealthSeries
      summary: Get release health time series
      description: |
        Get time-series data for release health metrics including session counts 
        and crash rates over time. Suitable for health trend analysis.
      tags: [Release Health]
      parameters:
        - in: query
          name: project
          required: true
          schema: 
            type: string
          description: Project slug
        - in: query
          name: environment
          schema: 
            type: string
          description: Filter by environment
          example: "production"
        - in: query
          name: version
          schema: 
            type: string
          description: Filter by release version
          example: "v1.2.3"
        - in: query
          name: range
          schema: 
            type: string
            enum: [1h, 24h, 7d, 14d, 30d, 90d, 1y]
            default: "24h"
          description: Time range for health data
        - in: query
          name: interval
          schema: 
            type: string
            enum: [1m, 5m, 15m, 30m, 1h, 24h, 7d, 30d]
            default: "5m"
          description: Time bucket interval
        - in: query
          name: backend
          schema: 
            type: string
            enum: [pg, ch]
            default: "pg"
          description: Data backend (PostgreSQL or ClickHouse)
        - in: query
          name: from
          schema: 
            type: string
            format: date-time
          description: Start datetime (overrides range)
        - in: query
          name: to
          schema: 
            type: string
            format: date-time
          description: End datetime (overrides range)
      responses:
        '200':
          description: Time-series health data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HealthBucket'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/deployments:
    get:
      operationId: listDeployments
      summary: List deployments
      description: Get deployment history for a project with release tracking
      tags: [Deployments]
      parameters:
        - in: query
          name: project
          schema: 
            type: string
          description: Filter by project slug
          example: "my-web-app"
      responses:
        '200':
          description: List of deployments with timing and status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deployment'
    post:
      operationId: createDeployment
      summary: Create deployment record
      description: |
        Record a new deployment for release tracking and correlation with error rates.
        Used to correlate releases with changes in error patterns.
      tags: [Deployments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentCreate'
      responses:
        '201': 
          description: Deployment recorded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '400':
          description: Invalid deployment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/alert-rules:
    get:
      operationId: listAlertRules
      summary: List alert rules
      description: Get alert rules configured for a project
      tags: [Alerts]
      parameters:
        - in: query
          name: project
          schema: 
            type: string
          description: Filter by project slug
          example: "my-web-app"
      responses:
        '200':
          description: List of configured alert rules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertRule'
    post:
      operationId: createAlertRule
      summary: Create alert rule
      description: |
        Create a new alert rule to monitor error rates and send notifications.
        Rules can trigger email or webhook notifications based on event thresholds.
      tags: [Alerts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertRuleCreate'
      responses:
        '201': 
          description: Alert rule created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertRule'
        '400':
          description: Invalid alert rule configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/alert-rules/{id}:
    get:
      operationId: getAlertRule
      summary: Get alert rule details
      description: Retrieve a specific alert rule with full configuration
      tags: [Alerts]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Alert rule ID
      responses:
        '200':
          description: Alert rule configuration and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertRule'
        '404':
          description: Alert rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      operationId: updateAlertRule
      summary: Update alert rule
      description: Update an existing alert rule configuration
      tags: [Alerts]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Alert rule ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertRuleUpdate'
      responses:
        '200': 
          description: Alert rule updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertRule'
        '400':
          description: Invalid update data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Alert rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteAlertRule
      summary: Delete alert rule
      description: Permanently delete an alert rule
      tags: [Alerts]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Alert rule ID
      responses:
        '204': 
          description: Alert rule deleted successfully
        '404':
          description: Alert rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/alert-rules/{id}/snooze:
    post:
      operationId: snoozeAlerts
      summary: Snooze alerts for an issue
      description: |
        Temporarily disable alert notifications for a specific issue group.
        Useful during maintenance or known issue resolution periods.
      tags: [Alerts]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Alert rule ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [group]
              properties:
                group: 
                  type: integer
                  description: Issue group ID to snooze alerts for
                  example: 123
                minutes: 
                  type: integer
                  minimum: 1
                  maximum: 10080
                  default: 60
                  description: Duration to snooze alerts (in minutes)
                  example: 120
      responses:
        '200': 
          description: Alerts snoozed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Alerts snoozed for group 123 for 120 minutes"
                  until:
                    type: string
                    format: date-time
                    example: "2025-01-01T14:00:00Z"
        '400':
          description: Invalid snooze parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Alert rule or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/alert-rules/{id}/unsnooze:
    post:
      operationId: unsnoozeAlerts
      summary: Unsnooze alerts for an issue
      description: Re-enable alert notifications for a specific issue group
      tags: [Alerts]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Alert rule ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [group]
              properties:
                group: 
                  type: integer
                  description: Issue group ID to unsnooze alerts for
                  example: 123
      responses:
        '200': 
          description: Alerts re-enabled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Alerts re-enabled for group 123"
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Alert rule or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/alert-rules/{id}/targets:
    get:
      operationId: getAlertTargets
      summary: List alert targets
      description: Get notification targets configured for an alert rule
      tags: [Alerts]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Alert rule ID
      responses:
        '200':
          description: List of notification targets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertTarget'
        '404':
          description: Alert rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createAlertTarget
      summary: Add notification target
      description: Add a new notification target (email or webhook) to an alert rule
      tags: [Alerts]
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
          description: Alert rule ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertTargetCreate'
      responses:
        '201': 
          description: Notification target added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertTarget'
        '400':
          description: Invalid target configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Alert rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/alert-rules/for-group/{group_id}:
    get:
      operationId: getAlertRulesByGroup
      summary: Get alert rules for an issue
      description: |
        Get all alert rules that would be triggered by events in a specific issue group.
        Useful for understanding which notifications would fire for an issue.
      tags: [Alerts]
      parameters:
        - in: path
          name: group_id
          required: true
          schema: 
            type: integer
          description: Issue group ID
          example: 123
      responses:
        '200':
          description: Alert rules applicable to this issue group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertRule'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key for management endpoints (e.g., "Bearer your-api-key")
    IngestTokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Project ingest token for event/session ingestion (e.g., "Bearer your-ingest-token")

  schemas:
    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string
          description: Human-readable error message
          example: "Invalid project slug"
        code:
          type: string
          description: Machine-readable error code
          example: "INVALID_SLUG"
        details:
          type: object
          description: Additional error context
          example: {"field": "slug", "reason": "contains invalid characters"}

    Project:
      type: object
      properties:
        id: 
          type: integer
          description: Unique project identifier
          example: 1
        name: 
          type: string
          description: Human-readable project name
          example: "My Web App"
        slug: 
          type: string
          description: URL-friendly project identifier
          example: "my-web-app"
        ingest_token: 
          type: string
          description: Secret token for event/session ingestion
          example: "1234567890abcdef"
        created_at: 
          type: string
          format: date-time
          description: Project creation timestamp
          example: "2025-01-01T00:00:00Z"

    Event:
      type: object
      properties:
        id: 
          type: integer
          description: Unique event identifier
          example: 12345
        project: 
          type: integer
          description: Project ID this event belongs to
          example: 1
        group: 
          type: integer
          nullable: true
          description: Issue group ID (null for ungrouped events)
          example: 123
        message: 
          type: string
          description: Event message or error description
          example: "Database connection timeout"
        level: 
          type: string
          enum: [error, warning, info]
          description: Event severity level
          example: "error"
        payload: 
          type: object
          description: Additional structured event data
          example: {"user_id": 456, "request_id": "req_789"}
        received_at: 
          type: string
          format: date-time
          description: Server ingestion timestamp
          example: "2025-01-01T12:00:00Z"
        release: 
          type: integer
          nullable: true
          description: Associated release ID
          example: 42
        environment: 
          type: string
          description: Environment where event occurred
          example: "production"
        stack: 
          type: string
          nullable: true
          description: Raw stack trace
          example: "Error: Connection timeout\n    at Database.connect (db.js:45:12)"
        symbolicated: 
          type: object
          nullable: true
          description: Symbolicated stack frames with original source locations
          example: {"frames": [{"file": "src/db.js", "line": 45, "function": "connect"}]}

    EventIngest:
      type: object
      required: [message]
      properties:
        message: 
          type: string
          description: Error message or event description
          example: "Payment processing failed"
        level: 
          type: string
          enum: [error, warning, info]
          default: "error"
          description: Event severity level
        payload: 
          type: object
          description: Additional structured event data
          example: {"transaction_id": "tx_123", "amount": 99.99}
        release: 
          type: string
          description: Release version identifier
          example: "v1.2.3"
        environment: 
          type: string
          default: "production"
          description: Environment name
        stack: 
          type: string
          description: Stack trace string
          example: "Error: Payment failed\n    at processPayment (payment.js:67:8)"
        frames:
          type: array
          description: Stack frames (alternative to stack string)
          items:
            $ref: '#/components/schemas/Frame'
        tags:
          type: array
          description: Event tags for categorization and filtering
          items:
            type: object
            properties:
              key:
                type: string
                example: "user_type"
              value:
                type: string
                example: "premium"
        extra:
          type: object
          description: Additional unstructured event context
          example: {"browser": "Chrome 96", "os": "Windows 10"}

    Frame:
      type: object
      required: [file, line]
      properties:
        function: 
          type: string
          description: Function or method name
          example: "processPayment"
        file: 
          type: string
          description: Source filename
          example: "app.min.js"
        line: 
          type: integer
          description: Line number in the file
          example: 1
          minimum: 1
        column: 
          type: integer
          description: Column number on the line
          example: 2345
          minimum: 1

    SymbolicatedFrame:
      allOf:
        - $ref: '#/components/schemas/Frame'
        - type: object
          properties:
            orig_file: 
              type: string
              description: Original source filename (before minification)
              example: "src/components/PaymentForm.jsx"
            orig_line: 
              type: integer
              description: Original line number
              example: 67
              minimum: 1
            orig_column: 
              type: integer
              description: Original column number
              example: 12
              minimum: 1
            orig_function:
              type: string
              description: Original function name
              example: "handlePaymentSubmit"

    ClickHouseEvent:
      type: object
      description: Event record optimized for analytics from ClickHouse
      properties:
        id: 
          type: integer
          description: Event ID
          example: 12345
        project: 
          type: string
          description: Project slug
          example: "my-web-app"
        level: 
          type: string
          description: Event severity level
          example: "error"
        fingerprint: 
          type: string
          description: Event fingerprint for grouping
          example: "a1b2c3d4e5f6"
        title: 
          type: string
          description: Event title or summary
          example: "Database Connection Error"
        message: 
          type: string
          description: Full event message
          example: "Connection to database failed after 30s timeout"
        received_at: 
          type: string
          description: Ingestion timestamp (ClickHouse format)
          example: "2025-01-01 12:00:00"

    Group:
      type: object
      description: Issue group (deduplicated collection of similar events)
      properties:
        id: 
          type: integer
          description: Unique group identifier
          example: 123
        project: 
          type: integer
          description: Project ID
          example: 1
        title: 
          type: string
          description: Issue title or summary
          example: "Database connection timeout in payment processing"
        level: 
          type: string
          enum: [error, warning, info]
          description: Highest severity level in this group
          example: "error"
        count: 
          type: integer
          description: Total number of events in this group
          example: 47
          minimum: 1
        first_seen: 
          type: string
          format: date-time
          description: First occurrence of this issue
          example: "2025-01-01T10:00:00Z"
        last_seen: 
          type: string
          format: date-time
          description: Most recent occurrence
          example: "2025-01-01T12:30:00Z"
        status:
          type: string
          enum: [open, resolved, ignored]
          description: Issue workflow status
          example: "open"
        assignee:
          type: string
          nullable: true
          description: Username of assigned team member
          example: "alice"
        is_bookmarked:
          type: boolean
          description: Whether this issue is bookmarked
          example: false
        permalink:
          type: string
          description: Direct URL to this issue
          example: "/issues/123"

    Comment:
      type: object
      properties:
        id:
          type: integer
          description: Comment ID
          example: 1
        group:
          type: integer
          description: Issue group ID
          example: 123
        body:
          type: string
          description: Comment text content
          example: "Issue reproduced in staging environment. Working on fix."
        author:
          type: string
          description: Comment author username
          example: "alice"
        created_at:
          type: string
          format: date-time
          description: Comment creation timestamp
          example: "2025-01-01T12:00:00Z"

    Release:
      type: object
      properties:
        id: 
          type: integer
          description: Unique release identifier
          example: 42
        project: 
          type: integer
          description: Project ID
          example: 1
        version: 
          type: string
          description: Release version string
          example: "v1.2.3"
        environment: 
          type: string
          description: Target environment
          example: "production"
        created_at: 
          type: string
          format: date-time
          description: Release creation timestamp
          example: "2025-01-01T00:00:00Z"
        date_released: 
          type: string
          format: date-time
          nullable: true
          description: Actual deployment timestamp
          example: "2025-01-01T10:00:00Z"

    Artifact:
      type: object
      description: Release artifact (source map, debug symbols, etc.)
      properties:
        id: 
          type: integer
          description: Artifact ID
          example: 1
        release: 
          type: integer
          description: Associated release ID
          example: 42
        name: 
          type: string
          description: Artifact filename
          example: "static/js/main.abc123.js.map"
        content: 
          type: string
          description: Artifact content (base64 encoded for binary files)
        content_type: 
          type: string
          description: MIME type
          example: "application/json"
        file_name: 
          type: string
          description: Original source filename (extracted from source maps)
          example: "main.js"
        checksum: 
          type: string
          description: Content checksum for integrity verification
          example: "sha256:a1b2c3d4e5f6..."
        created_at: 
          type: string
          format: date-time
          description: Upload timestamp
          example: "2025-01-01T00:00:00Z"

    Session:
      type: object
      properties:
        session_id:
          type: string
          description: Session identifier
          example: "sess_1234567890"
        status:
          type: string
          enum: [init, ok, errored, crashed, exited]
          description: Session status
          example: "ok"
        release:
          type: string
          description: Release version
          example: "v1.2.3"
        environment:
          type: string
          description: Environment name
          example: "production"
        duration_ms:
          type: integer
          description: Session duration in milliseconds
          example: 45000
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T12:00:00Z"

    SessionIngest:
      type: object
      required: [session_id]
      properties:
        session_id: 
          type: string
          description: Unique session identifier (should be consistent across updates)
          example: "sess_1234567890abcdef"
        status: 
          type: string
          enum: [init, ok, errored, crashed, exited]
          default: "init"
          description: |
            Session lifecycle status:
            - `init`: Session started
            - `ok`: Session ended normally
            - `errored`: Session had errors but didn't crash
            - `crashed`: Session crashed
            - `exited`: Session was terminated
        user: 
          type: string
          description: User identifier (for user-based analytics)
          example: "user_456"
        duration_ms: 
          type: integer
          description: Session duration in milliseconds
          example: 30000
          minimum: 0
        release: 
          type: string
          description: Release version
          example: "v1.2.3"
        environment: 
          type: string
          default: "production"
          description: Environment name

    HealthSummary:
      type: object
      description: Release health summary with crash-free rates
      properties:
        version: 
          type: string
          description: Release version
          example: "v1.2.3"
        environment: 
          type: string
          description: Environment name
          example: "production"
        total_sessions: 
          type: integer
          description: Total sessions recorded
          example: 10000
          minimum: 0
        crashed_sessions: 
          type: integer
          description: Number of crashed sessions
          example: 15
          minimum: 0
        crash_free_rate: 
          type: number
          format: float
          description: Crash-free rate as a percentage (0-100)
          example: 99.85
          minimum: 0
          maximum: 100

    HealthBucket:
      type: object
      description: Time-series health data bucket
      properties:
        bucket: 
          type: string
          description: Time bucket identifier (ISO 8601)
          example: "2025-01-01T12:00:00Z"
        total: 
          type: integer
          description: Total sessions in this time bucket
          example: 150
          minimum: 0
        crashed: 
          type: integer
          description: Crashed sessions in this bucket
          example: 2
          minimum: 0
        crash_free_rate:
          type: number
          format: float
          description: Crash-free rate for this bucket
          example: 98.67
          minimum: 0
          maximum: 100

    EventBucket:
      type: object
      description: Time-series event data bucket for dashboard charts
      properties:
        bucket: 
          type: string
          description: Time bucket identifier (ISO 8601)
          example: "2025-01-01T12:00:00Z"
        error: 
          type: integer
          description: Number of error events in this bucket
          example: 23
          minimum: 0
        warning: 
          type: integer
          description: Number of warning events in this bucket
          example: 8
          minimum: 0
        info: 
          type: integer
          description: Number of info events in this bucket
          example: 45
          minimum: 0
        total:
          type: integer
          description: Total events in this bucket
          example: 76
          minimum: 0

    TopGroup:
      type: object
      description: Top issue group for dashboard analytics
      properties:
        group_id:
          type: integer
          description: Issue group ID
          example: 123
        title:
          type: string
          description: Issue title
          example: "Database timeout in payment processing"
        count:
          type: integer
          description: Number of events in the specified time period
          example: 47
          minimum: 1
        level:
          type: string
          enum: [error, warning, info]
          description: Highest severity level in this group
          example: "error"
        last_seen:
          type: string
          format: date-time
          description: Most recent event timestamp
          example: "2025-01-01T12:30:00Z"

    Deployment:
      type: object
      properties:
        id: 
          type: integer
          description: Deployment ID
          example: 1
        project: 
          type: integer
          description: Project ID
          example: 1
        release: 
          type: integer
          description: Associated release ID
          example: 42
        environment: 
          type: string
          description: Deployment environment
          example: "production"
        name: 
          type: string
          description: Deployment name or identifier
          example: "Production Deploy #47"
        url: 
          type: string
          description: Deployment URL or endpoint
          example: "https://myapp.com"
        date_started: 
          type: string
          format: date-time
          description: Deployment start timestamp
          example: "2025-01-01T10:00:00Z"
        date_finished: 
          type: string
          format: date-time
          nullable: true
          description: Deployment completion timestamp
          example: "2025-01-01T10:05:00Z"

    DeploymentCreate:
      type: object
      required: [project, release, environment]
      properties:
        project: 
          type: integer
          description: Project ID
          example: 1
        release: 
          type: integer
          description: Release ID being deployed
          example: 42
        environment: 
          type: string
          description: Target environment
          example: "production"
        name: 
          type: string
          description: Deployment name or identifier
          example: "Production Deploy #47"
        url: 
          type: string
          description: Deployment URL
          example: "https://myapp.com"

    AlertRule:
      type: object
      properties:
        id: 
          type: integer
          description: Alert rule ID
          example: 1
        project: 
          type: integer
          description: Project ID
          example: 1
        name: 
          type: string
          description: Human-readable rule name
          example: "High Error Rate - Production"
        level: 
          type: string
          nullable: true
          enum: [error, warning, info]
          description: Filter by event level (null = all levels)
          example: "error"
        threshold_count: 
          type: integer
          description: Number of events to trigger alert
          example: 10
          minimum: 1
        threshold_window_minutes: 
          type: integer
          description: Time window for counting events (minutes)
          example: 5
          minimum: 1
        notify_interval_minutes: 
          type: integer
          description: Minimum time between notifications (minutes)
          example: 60
          minimum: 1
        rearm_after_minutes: 
          type: integer
          description: Time before rule can fire again after resolving (minutes)
          example: 120
          minimum: 1
        last_triggered_at: 
          type: string
          format: date-time
          nullable: true
          description: Last time this rule was triggered
          example: "2025-01-01T12:00:00Z"
        target_type: 
          type: string
          enum: [email, webhook]
          description: Primary notification method
          example: "email"
        target_value: 
          type: string
          description: Primary notification target (email address or webhook URL)
          example: "alerts@mycompany.com"
        active: 
          type: boolean
          description: Whether this rule is currently active
          example: true

    AlertRuleCreate:
      type: object
      required: [project, name, threshold_count]
      properties:
        project:
          type: integer
          description: Project ID
          example: 1
        name:
          type: string
          description: Human-readable rule name
          example: "High Error Rate - Production"
          maxLength: 100
        level:
          type: string
          nullable: true
          enum: [error, warning, info]
          description: Filter by event level (null = all levels)
        threshold_count:
          type: integer
          minimum: 1
          description: Number of events to trigger alert
          example: 10
        threshold_window_minutes:
          type: integer
          minimum: 1
          default: 5
          description: Time window for counting events
        notify_interval_minutes:
          type: integer
          minimum: 1
          default: 60
          description: Cooldown between notifications
        target_type:
          type: string
          enum: [email, webhook]
          default: "email"
          description: Notification method
        target_value:
          type: string
          description: Email address or webhook URL
          example: "alerts@mycompany.com"
          maxLength: 255

    AlertRuleUpdate:
      type: object
      properties:
        name: 
          type: string
          description: Rule name
          maxLength: 100
        level: 
          type: string
          nullable: true
          enum: [error, warning, info]
          description: Event level filter
        threshold_count: 
          type: integer
          minimum: 1
          description: Event count threshold
        threshold_window_minutes: 
          type: integer
          minimum: 1
          description: Time window in minutes
        notify_interval_minutes: 
          type: integer
          minimum: 1
          description: Notification cooldown
        active: 
          type: boolean
          description: Whether rule is active

    AlertTarget:
      type: object
      properties:
        id: 
          type: integer
          description: Target ID
          example: 1
        rule: 
          type: integer
          description: Associated alert rule ID
          example: 1
        target_type: 
          type: string
          enum: [email, webhook]
          description: Notification method
          example: "email"
        target_value: 
          type: string
          description: Email address or webhook URL
          example: "dev-team@mycompany.com"
        subject_template: 
          type: string
          nullable: true
          description: |
            Email subject template (supports variables like {{group.title}}, {{count}})
          example: "Alert: {{group.title}} - {{count}} events"
        body_template: 
          type: string
          nullable: true
          description: |
            Email/webhook body template (supports variables)
          example: "{{count}} events occurred in {{window}} minutes for {{group.title}}"

    AlertTargetCreate:
      type: object
      required: [target_type, target_value]
      properties:
        target_type: 
          type: string
          enum: [email, webhook]
          description: Notification method
          example: "email"
        target_value: 
          type: string
          description: Email address or webhook URL
          example: "dev-team@mycompany.com"
          maxLength: 255
        subject_template: 
          type: string
          description: Custom email subject template
          example: "üö® {{group.title}} - {{count}} events"
          maxLength: 255
        body_template: 
          type: string
          description: Custom notification body template
          example: "{{count}} events in {{window}} minutes\n\nProject: {{project}}\nEnvironment: {{environment}}"
          maxLength: 2000

    PaginatedEvents:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        count:
          type: integer
          description: Total number of events matching the query
          example: 1250
        next:
          type: string
          nullable: true
          description: URL for the next page of results
          example: "/api/events?offset=50&limit=50"
        previous:
          type: string
          nullable: true
          description: URL for the previous page of results
          example: "/api/events?offset=0&limit=50"

    PaginatedGroups:
      type: object  
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        count:
          type: integer
          description: Total number of groups matching the query
          example: 89
        next:
          type: string
          nullable: true
          description: URL for the next page of results
        previous:
          type: string
          nullable: true
          description: URL for the previous page of results

tags:
  - name: System
    description: System health and status endpoints
  - name: Projects
    description: Project management and configuration
  - name: Events
    description: Event ingestion, retrieval, and management
  - name: Issues
    description: Issue group management and workflow
  - name: Ingestion
    description: High-throughput event and session ingestion
  - name: Analytics
    description: ClickHouse-powered analytics and reporting
  - name: Dashboard
    description: Dashboard data and time-series analytics
  - name: Releases
    description: Release management and artifact uploads
  - name: Symbolication
    description: Stack trace symbolication with source maps
  - name: Sessions
    description: Session tracking for release health
  - name: Release Health
    description: Crash-free rates and session analytics
  - name: Deployments
    description: Deployment tracking and correlation
  - name: Alerts
    description: Alert rules and notification management